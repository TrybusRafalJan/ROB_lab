vnames = {'valid_1.txt', 'valid_2.txt','valid_3.txt', 'valid_4.txt', 'valid_5.txt', 'valid_6.txt', 'valid_7.txt'};tnames = {'test_1.txt', 'test_2.txt', 'test_3.txt', 'test_4.txt', 'test_5.txt', 'test_6.txt', 'test_7.txt'};	vtab = loadCNNOutputs(vnames);load validlab.txtvalidlab = validlab + 1;ttab = loadCNNOutputs(tnames);load testlab.txttestlab = testlab + 1;iqltytest = [];iqltyvald = [];#check how many correct elements# validlab , testlab contains ground truth labels# vtab, ttab contains labels being a result of classificationfor i=1:columns(vtab)	iqltyvald = [iqltyvald sum(vtab(:,i)!=validlab)/rows(validlab)];	iqltytest = [iqltytest sum(ttab(:,i)!=testlab)/rows(testlab)];endeff = [1-iqltyvald; 1-iqltytest]scores = [];score_idx = [];Tsub_cometee = [];Vsub_cometee = [];elements = 7;pairs_no = 3;for k =1:pairs_nokscores = [];score_idx = [];  for i = 1:elements ### iterates over all possible pair combination        for j = 2:elements            vtab_prime = vtab(:,[i,j]);      ttab_prime = ttab(:,[i,j]);            vecUni = voteUni(vtab_prime, validlab);            tecUni = voteUni(ttab_prime, testlab);            resVald = [vecUni];      resTest = [tecUni];      resVald = [resVald fobj(resVald)];      resTest = [resTest fobj(resTest)];            pair_score = resTest(4); ### value of obj. function      pair = [i j]; ### current pair      scores = [scores;pair_score]; ### score for a pair      score_idx = [score_idx; pair] ; ### save each score pair indices                  endfor        endfor          [max_values indices] = max(scores) ### max value for this iteration  p = score_idx(indices,:) ### pair for this max;  Tsub_cometee = [Tsub_cometee ; justVoteUni(ttab(:,[p(1),p(2)]),testlab)]; ## append new pair to sub_cometee  Vsub_cometee = [Vsub_cometee ; justVoteUni(vtab(:,[p(1),p(2)]),validlab)];  ttab(:,[p(1),p(2)]) = [];  ### delte those pairs  vtab(:,[p(1),p(2)]) = [];   elements = elements - 2    endfor    Tsub_cometee = Tsub_cometee';  Vsub_cometee = Vsub_cometee';    ### add the last remaining element  Tsub_cometee = [Tsub_cometee ttab];  Vsub_cometee = [Vsub_cometee vtab];ttab = Tsub_cometee;vtab = Vsub_cometee;vecUni = voteUni(vtab, validlab);vecMaj = voteMaj(vtab, validlab);vecPlr = votePlr(vtab, validlab);tecUni = voteUni(ttab, testlab);tecMaj = voteMaj(ttab, testlab);tecPlr = votePlr(ttab, testlab);resVald = [vecUni; vecMaj; vecPlr;];resTest = [tecUni; tecMaj; tecPlr;];resVald = [resVald fobj(resVald)]resTest = [resTest fobj(resTest)]